#include <stdio.h>

struct vect3
{
	double x;
	double y;
	double z;
	double w;
};


struct triangle3d	//3D Triangle with vertex normals for Gouraud shading
{
	vect3 A;
	vect3 B;
	vect3 C;

	vect3 N;
};

vect3 subVectors(vect3 a, vect3 b)
{
	vect3 temp;

	temp.x = a.x - b.x;
	temp.y = a.y - b.y;
	temp.z = a.z - b.z;
	temp.w = 1.0;

	return temp;
}

double dotProduct(vect3 a, vect3 b)
{
	return (a.x * b.x + a.y * b.y + a.z * b.z);
}

bool getSupport(vect3 p, triangle3d S)
{
    bool isInsideTriangle = false;

	vect3 a = { S.B.x - S.A.x, S.B.y - S.A.y, 0.0, 0.0 };
	vect3 b = { S.C.x - S.B.x, S.C.y - S.B.y, 0.0, 0.0 };
	vect3 c = { S.A.x - S.C.x, S.A.y - S.C.y, 0.0, 0.0 };
	vect3 aN = { -a.y, a.x, 0.0, 0.0 };
	vect3 bN = { -b.y, b.x, 0.0, 0.0 };
	vect3 cN = { -c.y, c.x, 0.0, 0.0 };
	vect3 pA = subVectors(S.A, p);
	vect3 pB = subVectors(S.B, p);
	vect3 pC = subVectors(S.C, p);
	double dotA, dotB, dotC;
	dotA = dotProduct(pA, aN);
	dotB = dotProduct(pB, bN);
	dotC = dotProduct(pC, cN);
	if (dotA < 0.0 && dotB < 0.0 && dotC < 0.0)
	{
        isInsideTriangle = true;
	}

	
	return isInsideTriangle;
}



int main()
{
    
    vect3 A = { 0.0, 0.0, 0.0, 1.0 };
    vect3 B = { 5.0, 0.0, 0.0, 1.0 };
    vect3 C = { 5.0, 4.0, 0.0, 1.0 };
    
    vect3 P = { 2.5, 2.05, 0.0, 1.0 };
    
    triangle3d T;
    T.A = A; T.B = B; T.C = C; T.N = { 0.0, 0.0, 1.0, 0.0 };
    
    printf("Point lies inside the triangle: %d\n", getSupport(P, T));
    
    
    return 0;
}